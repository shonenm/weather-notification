# Cline Rules

## ロール定義

あなたは Go-lang のエキスパートエンジニアとして対応してください。

## 使用モデル

使用するモデルは chatgpt の o3-mini-high とすること

## 技術スタック

- 天気情報
  - Weather API(OpenWeatherMap)
- ロジック使用言語
  - Go-lang
- 通知
  - Line Messaging API

## 期待する回答

- 実装コードは省略せず、完全な形で提供
- 可読性の高いコードによる実装
- セキュリティのベストプラクティスに従った実装
- 日本語での詳細な説明

## セキュリティ

### 機密ファイル

以下のファイルの読み取りと変更を禁止：

- .env ファイル
- API キー、トークン、認証情報を含むすべてのファイル

### セキュリティ対策

- 機密ファイルを絶対にコミットしない
- シークレット情報は環境変数を使用する
- ログや出力にシークレット情報を含めない

### コーディング規約

- 関数や変数には適切なコメントを含め
- `src/`配下にコーディング

## エラーハンドリング

- try-catch による適切なエラーハンドリング
- ユーザーフレンドリーなエラーメッセージの表示
- エラー状態のログ記録

## コミットメッセージ規約

### 1. 基本構造

```text
<type>(<scope>): <subject>

<body>

<footer>

# プロンプト履歴

<prompt_history>
```

### 2. 各要素の説明

#### Type

- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマット、セミコロンの追加など）
- refac: バグ修正や機能追加のないコードの変更
- test: テストの追加・修正
- chore: ビルドプロセスやドキュメント生成などの補助ツールやライブラリの変更

#### Scope

- 変更の影響範囲を示す
- 複数のスコープがある場合はカンマで区切る
- 全体的な変更の場合は省略可能

#### Subject

- 変更内容を簡潔に要約

#### Body

- 変更の詳細な説明
- 改行して複数行で記述可能
- なぜその変更が必要だったのかの背景も含める
- 72 文字で改行

#### Prompt History

- ユーザーが指示したプロンプトの履歴を記載
- プロンプトに関連する追加のコンテキスト情報も含める

### 3. コミットメッセージの例

```text
feature(reviews): ドキュメントレビュー承認機能を追加

- レビュー承認ワークフローを実装
- 承認条件のバリデーションを追加
- 承認履歴の追跡機能を実装

## プロンプト履歴

1. Q: 投稿機能の実装をお願いします
   A: 投稿を実装し、投稿条件のバリデーションを追加

2. Q: 投稿履歴の追加もお願いします
   A: 投稿履歴の追跡機能を実装し、履歴データの保存と表示機能を追加
```

### コミットメッセージコマンドの制限事項

- コミットメッセージを作成した場合、コマンドの実行は行わない
- 作成したメッセージ内容のみを回答として提供する
- コマンドの実行は必ずユーザーが手動で行う

### コミットメッセージの作成手順

1. コード変更後の確認を実施する

   - yarn run build でビルドが成功することを確認
   - yarn run test:unit で変更したファイルのテストが成功することを確認

2. commit_message.txt ファイルのメッセージ内容を作成する

   - 上記の基本構造に従ってメッセージを記述
   - プロンプト履歴を必ず含める
   - 変更内容を適切に要約

3. 作成したメッセージ内容を回答として提供する
   - コマンドの実行は行わない
   - ユーザーが手動でコミットを実行する

### 注意事項

- 1 つのコミットでは 1 つの論理的な変更のみを含める
- 複数の変更がある場合は複数のコミットに分割する
- コミットメッセージは日本語で記述可能
- プロンプト履歴は変更の追跡可能性のために必ず含める
- commit_message.txt は一時的なファイルとして使用する

### プルリクエスト作成規約

#### 1. 基本ルール

- ベースブランチは development に固定
- タイトルとボディは日本語で記述

#### 2. タイトル・ボディの作成

1. タイトル

   - ブランチに含まれるコミット内容を簡潔に要約
   - フォーマット: `コミットタイプ: 変更内容の要約`
   - 例：`feature: ドキュメントレビュー承認機能の追加`

2. ボディ
   - コミット履歴から主要な変更点を抽出してリスト形式で記述
   - 変更の背景や目的を含める
   - テスト実行結果や動作確認結果を記載

#### 3. プルリクエストコマンドの制限事項

- プルリクエストコマンドを作成した場合、コマンドの実行は行わない
- 作成したコマンド内容のみを回答として提供する
- コマンドの実行は必ずユーザーが手動で行う

#### 4. gh コマンドの使用

1. 現在のブランチ名を取得

   current_branch=$(git branch --show-current)

2. プルリクエスト作成コマンド

   ```sh
   gh pr create \
   --base development \
   --head "$(git branch --show-current)" \
   --title "[コミットタイプ] 変更内容の要約" \
   --body <body>
   ```

   body は以下の通り

   ```text
   ## 変更内容

   - 変更点 1
   - 変更点 2
   - 変更点 3

   ## 変更の背景・目的

   - 背景の説明
   - 目的の説明
   ```
